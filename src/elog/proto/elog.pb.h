// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: elog.proto
// Protobuf C++ Version: 6.30.2

#ifndef elog_2eproto_2epb_2eh
#define elog_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_elog_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_elog_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_elog_2eproto;
}  // extern "C"
namespace elog_grpc {
class ELogGRPCRecordMsg;
struct ELogGRPCRecordMsgDefaultTypeInternal;
extern ELogGRPCRecordMsgDefaultTypeInternal _ELogGRPCRecordMsg_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ELogGRPCRecordMsg_class_data_;
class ELogGRPCStatus;
struct ELogGRPCStatusDefaultTypeInternal;
extern ELogGRPCStatusDefaultTypeInternal _ELogGRPCStatus_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ELogGRPCStatus_class_data_;
}  // namespace elog_grpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace elog_grpc {

// ===================================================================


// -------------------------------------------------------------------

class ELogGRPCStatus final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:elog_grpc.ELogGRPCStatus) */ {
 public:
  inline ELogGRPCStatus() : ELogGRPCStatus(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ELogGRPCStatus* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ELogGRPCStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ELogGRPCStatus(::google::protobuf::internal::ConstantInitialized);

  inline ELogGRPCStatus(const ELogGRPCStatus& from) : ELogGRPCStatus(nullptr, from) {}
  inline ELogGRPCStatus(ELogGRPCStatus&& from) noexcept
      : ELogGRPCStatus(nullptr, std::move(from)) {}
  inline ELogGRPCStatus& operator=(const ELogGRPCStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ELogGRPCStatus& operator=(ELogGRPCStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ELogGRPCStatus& default_instance() {
    return *reinterpret_cast<const ELogGRPCStatus*>(
        &_ELogGRPCStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ELogGRPCStatus& a, ELogGRPCStatus& b) { a.Swap(&b); }
  inline void Swap(ELogGRPCStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ELogGRPCStatus* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ELogGRPCStatus* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ELogGRPCStatus>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ELogGRPCStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ELogGRPCStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "elog_grpc.ELogGRPCStatus"; }

 protected:
  explicit ELogGRPCStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ELogGRPCStatus(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ELogGRPCStatus& from);
  ELogGRPCStatus(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ELogGRPCStatus&& from) noexcept
      : ELogGRPCStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:elog_grpc.ELogGRPCStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ELogGRPCStatus& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_elog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ELogGRPCStatus_class_data_;
// -------------------------------------------------------------------

class ELogGRPCRecordMsg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:elog_grpc.ELogGRPCRecordMsg) */ {
 public:
  inline ELogGRPCRecordMsg() : ELogGRPCRecordMsg(nullptr) {}
  ~ELogGRPCRecordMsg() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ELogGRPCRecordMsg* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ELogGRPCRecordMsg));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ELogGRPCRecordMsg(::google::protobuf::internal::ConstantInitialized);

  inline ELogGRPCRecordMsg(const ELogGRPCRecordMsg& from) : ELogGRPCRecordMsg(nullptr, from) {}
  inline ELogGRPCRecordMsg(ELogGRPCRecordMsg&& from) noexcept
      : ELogGRPCRecordMsg(nullptr, std::move(from)) {}
  inline ELogGRPCRecordMsg& operator=(const ELogGRPCRecordMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ELogGRPCRecordMsg& operator=(ELogGRPCRecordMsg&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ELogGRPCRecordMsg& default_instance() {
    return *reinterpret_cast<const ELogGRPCRecordMsg*>(
        &_ELogGRPCRecordMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ELogGRPCRecordMsg& a, ELogGRPCRecordMsg& b) { a.Swap(&b); }
  inline void Swap(ELogGRPCRecordMsg* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ELogGRPCRecordMsg* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ELogGRPCRecordMsg* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ELogGRPCRecordMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ELogGRPCRecordMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ELogGRPCRecordMsg& from) { ELogGRPCRecordMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ELogGRPCRecordMsg* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "elog_grpc.ELogGRPCRecordMsg"; }

 protected:
  explicit ELogGRPCRecordMsg(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ELogGRPCRecordMsg(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ELogGRPCRecordMsg& from);
  ELogGRPCRecordMsg(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ELogGRPCRecordMsg&& from) noexcept
      : ELogGRPCRecordMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHostNameFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kProgramNameFieldNumber = 5,
    kThreadNameFieldNumber = 8,
    kFileFieldNumber = 9,
    kFunctionNameFieldNumber = 11,
    kLogSourceNameFieldNumber = 13,
    kModuleNameFieldNumber = 14,
    kLogMsgFieldNumber = 15,
    kRecordIdFieldNumber = 1,
    kTimeUTCMillisFieldNumber = 2,
    kProcessIdFieldNumber = 6,
    kThreadIdFieldNumber = 7,
    kLineFieldNumber = 10,
    kLogLevelFieldNumber = 12,
  };
  // optional string hostName = 3;
  bool has_hostname() const;
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_hostname();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_hostname();
  void set_allocated_hostname(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_hostname() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_hostname();

  public:
  // optional string userName = 4;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_username();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_username();
  void set_allocated_username(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_username();

  public:
  // optional string programName = 5;
  bool has_programname() const;
  void clear_programname() ;
  const std::string& programname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_programname(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_programname();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_programname();
  void set_allocated_programname(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_programname() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_programname(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_programname();

  public:
  // optional string threadName = 8;
  bool has_threadname() const;
  void clear_threadname() ;
  const std::string& threadname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threadname(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_threadname();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_threadname();
  void set_allocated_threadname(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_threadname() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_threadname(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_threadname();

  public:
  // optional string file = 9;
  bool has_file() const;
  void clear_file() ;
  const std::string& file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_file();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_file();
  void set_allocated_file(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_file() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_file();

  public:
  // optional string functionName = 11;
  bool has_functionname() const;
  void clear_functionname() ;
  const std::string& functionname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_functionname(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_functionname();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_functionname();
  void set_allocated_functionname(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_functionname() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_functionname(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_functionname();

  public:
  // optional string logSourceName = 13;
  bool has_logsourcename() const;
  void clear_logsourcename() ;
  const std::string& logsourcename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logsourcename(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_logsourcename();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_logsourcename();
  void set_allocated_logsourcename(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_logsourcename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_logsourcename(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_logsourcename();

  public:
  // optional string moduleName = 14;
  bool has_modulename() const;
  void clear_modulename() ;
  const std::string& modulename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modulename(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_modulename();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_modulename();
  void set_allocated_modulename(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_modulename() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_modulename(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_modulename();

  public:
  // optional string logMsg = 15;
  bool has_logmsg() const;
  void clear_logmsg() ;
  const std::string& logmsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logmsg(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_logmsg();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_logmsg();
  void set_allocated_logmsg(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_logmsg() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_logmsg(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_logmsg();

  public:
  // optional uint64 recordId = 1;
  bool has_recordid() const;
  void clear_recordid() ;
  ::uint64_t recordid() const;
  void set_recordid(::uint64_t value);

  private:
  ::uint64_t _internal_recordid() const;
  void _internal_set_recordid(::uint64_t value);

  public:
  // optional uint64 timeUTCMillis = 2;
  bool has_timeutcmillis() const;
  void clear_timeutcmillis() ;
  ::uint64_t timeutcmillis() const;
  void set_timeutcmillis(::uint64_t value);

  private:
  ::uint64_t _internal_timeutcmillis() const;
  void _internal_set_timeutcmillis(::uint64_t value);

  public:
  // optional uint64 processId = 6;
  bool has_processid() const;
  void clear_processid() ;
  ::uint64_t processid() const;
  void set_processid(::uint64_t value);

  private:
  ::uint64_t _internal_processid() const;
  void _internal_set_processid(::uint64_t value);

  public:
  // optional uint64 threadId = 7;
  bool has_threadid() const;
  void clear_threadid() ;
  ::uint64_t threadid() const;
  void set_threadid(::uint64_t value);

  private:
  ::uint64_t _internal_threadid() const;
  void _internal_set_threadid(::uint64_t value);

  public:
  // optional uint32 line = 10;
  bool has_line() const;
  void clear_line() ;
  ::uint32_t line() const;
  void set_line(::uint32_t value);

  private:
  ::uint32_t _internal_line() const;
  void _internal_set_line(::uint32_t value);

  public:
  // optional uint32 logLevel = 12;
  bool has_loglevel() const;
  void clear_loglevel() ;
  ::uint32_t loglevel() const;
  void set_loglevel(::uint32_t value);

  private:
  ::uint32_t _internal_loglevel() const;
  void _internal_set_loglevel(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:elog_grpc.ELogGRPCRecordMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15,
                                   0, 126,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ELogGRPCRecordMsg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr programname_;
    ::google::protobuf::internal::ArenaStringPtr threadname_;
    ::google::protobuf::internal::ArenaStringPtr file_;
    ::google::protobuf::internal::ArenaStringPtr functionname_;
    ::google::protobuf::internal::ArenaStringPtr logsourcename_;
    ::google::protobuf::internal::ArenaStringPtr modulename_;
    ::google::protobuf::internal::ArenaStringPtr logmsg_;
    ::uint64_t recordid_;
    ::uint64_t timeutcmillis_;
    ::uint64_t processid_;
    ::uint64_t threadid_;
    ::uint32_t line_;
    ::uint32_t loglevel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_elog_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ELogGRPCRecordMsg_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ELogGRPCRecordMsg

// optional uint64 recordId = 1;
inline bool ELogGRPCRecordMsg::has_recordid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_recordid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t ELogGRPCRecordMsg::recordid() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.recordId)
  return _internal_recordid();
}
inline void ELogGRPCRecordMsg::set_recordid(::uint64_t value) {
  _internal_set_recordid(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.recordId)
}
inline ::uint64_t ELogGRPCRecordMsg::_internal_recordid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recordid_;
}
inline void ELogGRPCRecordMsg::_internal_set_recordid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recordid_ = value;
}

// optional uint64 timeUTCMillis = 2;
inline bool ELogGRPCRecordMsg::has_timeutcmillis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_timeutcmillis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeutcmillis_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint64_t ELogGRPCRecordMsg::timeutcmillis() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.timeUTCMillis)
  return _internal_timeutcmillis();
}
inline void ELogGRPCRecordMsg::set_timeutcmillis(::uint64_t value) {
  _internal_set_timeutcmillis(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.timeUTCMillis)
}
inline ::uint64_t ELogGRPCRecordMsg::_internal_timeutcmillis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeutcmillis_;
}
inline void ELogGRPCRecordMsg::_internal_set_timeutcmillis(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeutcmillis_ = value;
}

// optional string hostName = 3;
inline bool ELogGRPCRecordMsg::has_hostname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ELogGRPCRecordMsg::hostname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.hostName)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_hostname(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.hostName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_hostname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.hostName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_hostname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostname_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_hostname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hostname_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hostname_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.hostName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hostname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hostname_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_hostname(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hostname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.hostName)
}

// optional string userName = 4;
inline bool ELogGRPCRecordMsg::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ELogGRPCRecordMsg::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.userName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.userName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.userName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_username(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.userName)
}

// optional string programName = 5;
inline bool ELogGRPCRecordMsg::has_programname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_programname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.programname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ELogGRPCRecordMsg::programname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.programName)
  return _internal_programname();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_programname(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.programname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.programName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_programname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_programname();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.programName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_programname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.programname_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_programname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.programname_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_programname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.programname_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_programname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.programName)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.programname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.programname_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_programname(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.programname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.programname_.IsDefault()) {
    _impl_.programname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.programName)
}

// optional uint64 processId = 6;
inline bool ELogGRPCRecordMsg::has_processid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_processid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t ELogGRPCRecordMsg::processid() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.processId)
  return _internal_processid();
}
inline void ELogGRPCRecordMsg::set_processid(::uint64_t value) {
  _internal_set_processid(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.processId)
}
inline ::uint64_t ELogGRPCRecordMsg::_internal_processid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.processid_;
}
inline void ELogGRPCRecordMsg::_internal_set_processid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.processid_ = value;
}

// optional uint64 threadId = 7;
inline bool ELogGRPCRecordMsg::has_threadid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_threadid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threadid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t ELogGRPCRecordMsg::threadid() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.threadId)
  return _internal_threadid();
}
inline void ELogGRPCRecordMsg::set_threadid(::uint64_t value) {
  _internal_set_threadid(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.threadId)
}
inline ::uint64_t ELogGRPCRecordMsg::_internal_threadid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threadid_;
}
inline void ELogGRPCRecordMsg::_internal_set_threadid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threadid_ = value;
}

// optional string threadName = 8;
inline bool ELogGRPCRecordMsg::has_threadname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_threadname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threadname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ELogGRPCRecordMsg::threadname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.threadName)
  return _internal_threadname();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_threadname(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.threadname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.threadName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_threadname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_threadname();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.threadName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_threadname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threadname_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_threadname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.threadname_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_threadname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.threadname_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_threadname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.threadName)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.threadname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.threadname_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_threadname(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.threadname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.threadname_.IsDefault()) {
    _impl_.threadname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.threadName)
}

// optional string file = 9;
inline bool ELogGRPCRecordMsg::has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ELogGRPCRecordMsg::file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.file)
  return _internal_file();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_file(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.file)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_file()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.file)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.file_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.file)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.file_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.file_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_file(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.file)
}

// optional uint32 line = 10;
inline bool ELogGRPCRecordMsg::has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t ELogGRPCRecordMsg::line() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.line)
  return _internal_line();
}
inline void ELogGRPCRecordMsg::set_line(::uint32_t value) {
  _internal_set_line(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.line)
}
inline ::uint32_t ELogGRPCRecordMsg::_internal_line() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.line_;
}
inline void ELogGRPCRecordMsg::_internal_set_line(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_ = value;
}

// optional string functionName = 11;
inline bool ELogGRPCRecordMsg::has_functionname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_functionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.functionname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ELogGRPCRecordMsg::functionname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.functionName)
  return _internal_functionname();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_functionname(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.functionname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.functionName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_functionname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.functionName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_functionname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.functionname_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_functionname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.functionname_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_functionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.functionname_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_functionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.functionName)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.functionname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.functionname_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_functionname(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.functionname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.functionname_.IsDefault()) {
    _impl_.functionname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.functionName)
}

// optional uint32 logLevel = 12;
inline bool ELogGRPCRecordMsg::has_loglevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_loglevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loglevel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t ELogGRPCRecordMsg::loglevel() const {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.logLevel)
  return _internal_loglevel();
}
inline void ELogGRPCRecordMsg::set_loglevel(::uint32_t value) {
  _internal_set_loglevel(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.logLevel)
}
inline ::uint32_t ELogGRPCRecordMsg::_internal_loglevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.loglevel_;
}
inline void ELogGRPCRecordMsg::_internal_set_loglevel(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loglevel_ = value;
}

// optional string logSourceName = 13;
inline bool ELogGRPCRecordMsg::has_logsourcename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_logsourcename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logsourcename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ELogGRPCRecordMsg::logsourcename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.logSourceName)
  return _internal_logsourcename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_logsourcename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.logsourcename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.logSourceName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_logsourcename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logsourcename();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.logSourceName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_logsourcename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logsourcename_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_logsourcename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.logsourcename_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_logsourcename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.logsourcename_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_logsourcename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.logSourceName)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.logsourcename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.logsourcename_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_logsourcename(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.logsourcename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logsourcename_.IsDefault()) {
    _impl_.logsourcename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.logSourceName)
}

// optional string moduleName = 14;
inline bool ELogGRPCRecordMsg::has_modulename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_modulename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modulename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ELogGRPCRecordMsg::modulename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.moduleName)
  return _internal_modulename();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_modulename(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.modulename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.moduleName)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_modulename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_modulename();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.moduleName)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_modulename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modulename_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_modulename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.modulename_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_modulename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.modulename_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_modulename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.moduleName)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.modulename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.modulename_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_modulename(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.modulename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.modulename_.IsDefault()) {
    _impl_.modulename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.moduleName)
}

// optional string logMsg = 15;
inline bool ELogGRPCRecordMsg::has_logmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ELogGRPCRecordMsg::clear_logmsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ELogGRPCRecordMsg::logmsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elog_grpc.ELogGRPCRecordMsg.logMsg)
  return _internal_logmsg();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ELogGRPCRecordMsg::set_logmsg(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.logmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elog_grpc.ELogGRPCRecordMsg.logMsg)
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::mutable_logmsg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logmsg();
  // @@protoc_insertion_point(field_mutable:elog_grpc.ELogGRPCRecordMsg.logMsg)
  return _s;
}
inline const std::string& ELogGRPCRecordMsg::_internal_logmsg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logmsg_.Get();
}
inline void ELogGRPCRecordMsg::_internal_set_logmsg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.logmsg_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ELogGRPCRecordMsg::_internal_mutable_logmsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.logmsg_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ELogGRPCRecordMsg::release_logmsg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:elog_grpc.ELogGRPCRecordMsg.logMsg)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.logmsg_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.logmsg_.Set("", GetArena());
  }
  return released;
}
inline void ELogGRPCRecordMsg::set_allocated_logmsg(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.logmsg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logmsg_.IsDefault()) {
    _impl_.logmsg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:elog_grpc.ELogGRPCRecordMsg.logMsg)
}

// -------------------------------------------------------------------

// ELogGRPCStatus

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace elog_grpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // elog_2eproto_2epb_2eh
